" Encoding {{{

set encoding=utf-8
set termencoding=utf-8
set fileencoding=utf-8
scriptencoding utf-8

" }}}
" Basic setup {{{

syntax on
filetype plugin indent on
set hidden
set mouse=a
set synmaxcol=9999
set nowrap
set number
set nocursorline
set nocursorcolumn
set title
set ttyfast
set lazyredraw
set clipboard=unnamed
set autoread
set nospell
set scrolloff=4
set textwidth=80
set nocompatible
set conceallevel=0
set updatetime=300
set backspace=indent,eol,start
set foldenable
set redrawtime=4000
set completeopt-=preview
set infercase
set ttimeoutlen=50
set wildoptions=tagfile
set display=lastline
set laststatus=2
set noshowmode
set showtabline=2
set nofsync

" Make our custom aliases available within a non-interactive vim.
" -----------------------------------------------------------------------------
let $BASH_ENV = '~/.bash_aliases'

" }}}
" Search {{{

set ignorecase
set incsearch
set hlsearch

" }}}
" Indentation {{{

set shiftwidth=2
set softtabstop=2
set tabstop=2
set autoindent
set smartindent
set smarttab
set shiftround
set expandtab

" }}}
" Wildmenu {{{

set wildmenu
set wildignorecase
set wildmode=list:longest,full

" }}}
" Omni completion {{{

" Enable omni completion and enable more characters to be available within
" autocomplete by appending to the 'iskeyword' variable.
set iskeyword+=-

" Set all the autocompleters.
autocmd FileType * setlocal omnifunc=syntaxcomplete#Complete
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript,javascript.jsx,jsx,typescript,typescript.jsx setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType php setlocal omnifunc=phpcomplete#CompletePHP

" Unset some complete options for optimised completion performance.
" i   Scan the current and included files.
set complete-=i

" }}}
" Undo history {{{

set undofile                 " Save undo's after file closes.
set undodir=~/.vim/undo,/tmp " Where to save undo histories.
set undolevels=10000          " How many undos.
set undoreload=10000         " Number of lines to save for undo.
set history=10000            " Sets how many lines of history vim has to remember.

" }}}
" Swap files {{{

set directory=~/.vim/swap,~/tmp,.
set backupdir=~/.vim/backup,~/tmp,.
set noswapfile
set nobackup

" }}}
" Filetypes {{{

augroup drupal
  autocmd!
  autocmd BufRead,BufNewFile *.blade.php setlocal filetype=php
  autocmd BufRead,BufNewFile *.theme setlocal filetype=php
  autocmd BufRead,BufNewFile *.module setlocal filetype=php
  autocmd BufRead,BufNewFile *.install setlocal filetype=php
  autocmd BufRead,BufNewFile *.test setlocal filetype=php
  autocmd BufRead,BufNewFile *.inc setlocal filetype=php
  autocmd BufRead,BufNewFile *.profile setlocal filetype=php
  autocmd BufRead,BufNewFile *.view setlocal filetype=php
  autocmd BufRead,BufNewFile *.drush setlocal filetype=php
augroup END

augroup bash
  autocmd!
  autocmd BufNewFile,BufRead *.bash_* setlocal ft=sh
  autocmd BufNewFile,BufRead *.sh setlocal ft=sh
augroup END

augroup javascript
  autocmd!
  autocmd BufRead,BufNewFile *.mdx,*.plop setlocal filetype=javascript
  autocmd BufRead,BufNewFile *.tsx setlocal filetype=typescript.jsx
augroup END

augroup rc
  autocmd!
  autocmd BufRead,BufNewFile .babelrc,.stylelintrc,.prettierrc,.htmlhintrc setlocal filetype=json
augroup END

augroup minified
  autocmd!
  autocmd BufRead,BufNewFile *.min.* setlocal syntax=off
augroup END

augroup styles
  autocmd!
  " Format options have impact when formatting code with the 'gq' binding.
  " Default: crqlo (see ':h fo-table' for more info)
  autocmd FileType * set formatoptions=crql
  autocmd FileType markdown set formatoptions+=t

  autocmd BufRead,BufNewFile *.min.* setlocal syntax=off
  autocmd FileType python setlocal tabstop=4 shiftwidth=4 softtabstop=4
  autocmd FileType go setlocal tabstop=4 shiftwidth=4 softtabstop=4
  autocmd FileType php setlocal iskeyword-=-
  autocmd FileType css,less,scss setlocal iskeyword+=.
  autocmd FileType vim setlocal iskeyword+=:
  autocmd FileType markdown setlocal spell conceallevel=0
  autocmd FileType json syntax match Comment +\/\/.\+$+
augroup END


" }}}
" Functions {{{

" Indent if we're at the beginning of a line. Else, do completion.
function! InsertTabWrapper()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<Tab>"
  else
    return "\<C-p>"
  endif
endfunction

function s:HelpWindow(args) abort
  if winwidth('.') >= 164
    call execute 'vertical h ' . a:args
    call execute 'vertical resize 84'
  else
    call execute 'h ' . a:args
  endif
endfunction

function! s:SpaceToTab(str)
  let l:remainder = len(a:str) % shiftwidth()
  return repeat("\t", len(a:str) / shiftwidth()) . repeat(' ', l:remainder)
endfunction

function s:Rename(bang, args) abort
  let l:oldfile = expand('%:p')
  let l:newfile = simplify(expand('%:p:h') . '/' . a:args)
  setlocal modifiable
  call execute ':saveas' . a:bang . ' ' . l:newfile
  call delete(l:oldfile)
  call execute ':' . bufnr('$' . 'bw')
endfunction

function! s:IndentCode()
  " Save the current window view.
  let l:winview = winsaveview()

  " Indent code.
  keepjumps execute 'normal! gg=G'

  " Restore the window view.
  call winrestview(l:winview)
endfunction

function s:PHPConvertArrays() abort
  let l:winview = winsaveview()
  while search('\m\(\w\)\@<!\carray\s*(') > 0
    call execute "normal! dt(%r]\<C-O>r["
  endwhile
  call winrestview(l:winview)
endfunction

function! s:GetRelativeBufferPathInGitDirectory()
  return substitute(
        \ expand('%:p'),
        \ trim(system('git -C ' . shellescape(expand('%:p:h')) . ' rev-parse --show-toplevel')),
        \ '',
        \ 'g'
        \ )
endfunction

function s:OnBufWritePre()
  if !exists('b:disable_hook_bufprewrite')
    " Save the current window view.
    let l:winview = winsaveview()

    " Delete empty lines at the end of the buffer.
    silent! keepjumps call execute 'v/\n*./d'

    " Execute commands only for non-test files.
    let l:test_file_regex = '\m.\+\.vader$'
    if expand('%:t') !~# l:test_file_regex

      " Delete trailing whitespaces for each line.
      silent! keepjumps call execute '%s/\s\+$//ge'

      " We want to 'retab!' the whole file, but this will convert spaces to tabs
      " inside comments when using tabs. To fix this we will check if tabs are
      " used, then convert everything to spaces and then convert the indentation
      " to tabs.
      if &expandtab == 0
        setlocal expandtab
        silent! keepjumps call execute '%retab!'
        silent! keepjumps call execute '%s/^\s\+/\=<SID>SpaceToTab(submatch(0)/'
        setlocal noexpandtab
      endif
    endif

    " Restore the window view.
    call winrestview(l:winview)
  endif
endfunction

function s:OnBufReadPost()
  " Set the last edit position.
  if line("'\"") > 0 && line("'\"") <= line("$")
    execute "normal! g`\""
  endif
endfunction

function! s:OnBufRead()
  " Set the absolute path of the current buffer to the system clipboard.
  " 'BP' refers to 'Buffer Path'.
  command! -nargs=0 BP :let @+=expand('%:p') | echo @*

  " Set the path of the current buffer relative to its git diretory to the
  " system clipboard. 'GBP' refers for 'Git Buffer Path'.
  command! -nargs=0 GBP :let @+=<SID>GetRelativeBufferPathInGitDirectory() | echo @*
endfunction

" }}}
" Hooks {{{

augroup hooks
  autocmd!
  autocmd BufWritePre *         call <SID>OnBufWritePre()
  autocmd BufReadPost *         call <SID>OnBufReadPost()
  autocmd BufRead,BufNewFile *  call <SID>OnBufRead()
augroup END

" }}}
" Commands {{{

" Rename current buffer.
command! -nargs=1 -complete=file Rename call <SID>Rename('<bang>', '<args>')

" Convert PHP <= 5.3 syntax array() to [].
command! -nargs=0 PHPConvertArrays call <SID>PHPConvertArrays()

" Open help menu in a 80-column vertical window.
command! -nargs=* -complete=help H call <SID>HelpWindow('<args>')


" }}}
" Mappings {{{

" Leader key
" ------------------------------------------------------------------------------
let g:mapleader = "\<Space>"

" Buffers
" ------------------------------------------------------------------------------
nnoremap <silent> Z :bprev<CR>
nnoremap <silent> X :bnext<CR>
nnoremap <silent> Q :bw<CR>

" Moving lines up or down
" ------------------------------------------------------------------------------
nnoremap <silent> <C-Down> :m .+1<CR>==
inoremap <silent> <C-Down> <Esc>:m .+1<CR>==gi
nnoremap <silent> <C-Up> :m .-2<CR>==
inoremap <silent> <C-Up> <Esc>:m .-2<CR>==gi
vnoremap <silent> <C-Down> :m '>+1<CR>gv=gv
vnoremap <silent> <C-Up> :m '<-2<CR>gv=gv

" Set pastetoggle
" ------------------------------------------------------------------------------
set pastetoggle=<F2>

" Rot13
" ------------------------------------------------------------------------------
nnoremap <silent> <F6> ggg?G<CR>

" Space bar un-highligths search
" ------------------------------------------------------------------------------
noremap <silent> <Space> :silent! noh<CR>

" Re-indent code.
" ------------------------------------------------------------------------------
noremap <Leader>i :call <SID>IndentCode()<CR>

" Allow saving of files as sudo when I forgot to start vim using sudo
" ------------------------------------------------------------------------------
cnoremap w!! w !sudo tee > /dev/null %

" Spell check
" ------------------------------------------------------------------------------
nnoremap <Leader>sc :setlocal spell!<CR>

" Remove ^M
" ------------------------------------------------------------------------------
noremap <Leader>m :%s/\r//g<CR>

" Map ; to : for simplicity & efficiency
" ------------------------------------------------------------------------------
noremap ; :

" Selection
" ------------------------------------------------------------------------------
" Make selection stay after keypress.
" ------------------------------------------------------------------------------
noremap > >gv
noremap < <gv

" Auto complete
" ------------------------------------------------------------------------------
inoremap <expr> <tab> InsertTabWrapper()

" Typo's while saving
" ------------------------------------------------------------------------------
" Avoid saving files like ; and w; and other typos
" ------------------------------------------------------------------------------
cnoremap w; w
cnoremap w: w
cnoremap W; w
cnoremap W: w

" }}}
